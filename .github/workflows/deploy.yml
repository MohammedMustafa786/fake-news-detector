name: Deploy Fake News Detector

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-deploy.txt
    
    - name: Download NLTK data
      run: |
        python -c "import nltk; nltk.download('punkt'); nltk.download('punkt_tab'); nltk.download('stopwords'); nltk.download('wordnet'); nltk.download('omw-1.4'); nltk.download('averaged_perceptron_tagger'); nltk.download('universal_tagset')"
    
    - name: Test model loading
      run: |
        python -c "
        import pickle
        try:
            with open('models_multilingual/multilingual_preprocessor.pkl', 'rb') as f:
                preprocessor = pickle.load(f)
            with open('models_multilingual/multilingual_best_model.pkl', 'rb') as f:
                model = pickle.load(f)
            print('‚úÖ Models loaded successfully')
        except Exception as e:
            print(f'‚ùå Model loading failed: {e}')
            exit(1)
        "
    
    - name: Run comprehensive tests
      run: |
        python test_project_comprehensive.py

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t fake-news-detector .
    
    - name: Test Docker container
      run: |
        docker run -d --name test-container -p 5000:5000 fake-news-detector
        sleep 30
        curl -f http://localhost:5000/health || exit 1
        docker stop test-container
        docker rm test-container
    
    - name: Deploy to GitHub Pages (Streamlit)
      if: success()
      run: |
        echo "üöÄ Ready for deployment!"
        echo "Docker image built successfully"
        echo "All tests passed"